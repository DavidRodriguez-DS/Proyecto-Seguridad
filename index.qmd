---
title: "Proyecto-Seguridad"
---

```{r results='hide'}
rm(list = ls())

if(!require(renv)){install.packages("renv")}
library(renv)

renv::init()

# Lista de paquetes a ser instalados y cargados

packages <- c("rio", "dplyr", "ggplot2", "RColorBrewer", "kableExtra", "Rcpp", "ggcorrplot", "latex2exp","broom", "knitr", "haven")

# Activamos función para instalar paquetes

install_and_load <- function(package) {
  tryCatch({
    if (!require(package, character.only = TRUE)) {
      utils::install.packages(package)
      library(package, character.only = TRUE)
    }
  }, error = function(e) {
    message(paste("Error installing or loading:", package, "\n", e))
  })
}


# Aplicamos la función a cada paquete

invisible(capture.output(sapply(packages, install_and_load)))

# Actualizamos paquetes instalados en el renv

renv::snapshot(prompt = TRUE)
```

```{r}
#Leemos nuestras BBDD

#ENUSC 2023
url_enusc <- "https://www.ine.gob.cl/docs/default-source/seguridad-ciudadana/bbdd/2023/base-usuario-20-enusc-2023bf436364553a489fab8e92a1ef14a520.sav?sfvrsn=473ce20c_6&download=true"

enusc <- import(url_enusc)

#CASEN 2022
url_casen <- "https://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2022/Base%20de%20datos%20Casen%202022%20SPSS_18%20marzo%202024.sav.zip"

casen <- import(url_casen)

#Dejamos bbdd casen cargada. No obstante no la utilizamos aún ya que, al parecer, no hay ninguna llave que nos permita unir ambas bbdd

enusc_reducida <- enusc %>% select(rph_ID, idhogar, enc_idr, enc_region, enc_rpc, com102, rph_numeroLinea, rph_numHogar, rph_edad, rph_sexo, rph_idgen, Kish, Hogar_Kish, rph_pertenencia_indigena, rph_nacionalidad, rph_nivel, rph_situacion_laboral_a, rph_situacion_laboral_b, rph_categoria_ocupacional, rph_ciuo, rph_nse, P_AUMENTO_PAIS, P_AUMENTO_COM, P_AUMENTO_BARRIO, P_FUENTE_INFO_PAIS_1, P_FUENTE_INFO_COM_1, P_INSEG_LUGARES_1, P_INSEG_LUGARES_2, P_INSEG_LUGARES_3, P_INSEG_LUGARES_4, P_INSEG_LUGARES_5, P_INSEG_LUGARES_6, P_INSEG_LUGARES_7, P_INSEG_LUGARES_8, P_INSEG_LUGARES_9, P_INSEG_LUGARES_10, P_INSEG_LUGARES_11, P_INSEG_LUGARES_12, P_INSEG_LUGARES_13, P_INSEG_LUGARES_14, P_INSEG_LUGARES_15, P_INSEG_LUGARES_16, P_INSEG_OSCURO_1, P_INSEG_DIA_1, P_INSEG_OSCURO_2, P_INSEG_DIA_2, PAD, PADC, PADB, PCOS, Fact_Pers_Com, Fact_Pers_Reg, Fact_Pers_Regional_102, Fact_Hog_Com, Fact_Hog_Reg, Fact_Hog_Regional_102, VarStrat, Conglomerado)

#Eliminamos los NS/NR de las variables a utilizar

enusc_reducida <- enusc_reducida %>%
  mutate_all(~ifelse(. %in% c(-88, -99, 85), NA, .))

#Invertimos la respuesta de las variables sobre inseguridad para asentar su respuesta:

enusc_reducida <- enusc_reducida %>% mutate(across(c("P_INSEG_LUGARES_1", "P_INSEG_LUGARES_2", "P_INSEG_LUGARES_3", "P_INSEG_LUGARES_4", 
                                   "P_INSEG_LUGARES_5", "P_INSEG_LUGARES_6", "P_INSEG_LUGARES_7", "P_INSEG_LUGARES_8", 
                                   "P_INSEG_LUGARES_9", "P_INSEG_LUGARES_10", "P_INSEG_LUGARES_11", "P_INSEG_LUGARES_12", 
                                   "P_INSEG_LUGARES_13", "P_INSEG_LUGARES_14", "P_INSEG_LUGARES_15", "P_INSEG_LUGARES_16", 
                                   "P_INSEG_OSCURO_1", "P_INSEG_DIA_1", "P_INSEG_OSCURO_2", "P_INSEG_DIA_2"), ~ 5 - .))


#Creamos un indice de inseguridad:

enusc_reducida <- enusc_reducida %>%
  mutate(indice_inseguridad = round(rowMeans(select(., P_INSEG_LUGARES_1:P_INSEG_LUGARES_16, P_INSEG_OSCURO_1:P_INSEG_DIA_2), na.rm = TRUE), 3))

enusc_reducida <- enusc_reducida %>% mutate(indice_percepcion = round(rowMeans(select(., P_AUMENTO_PAIS, P_AUMENTO_COM, P_AUMENTO_BARRIO), na.rm = TRUE), 3))

#Transformamos promedios de filas completamente NA que dieron como resultados "NaN" como NA

enusc_reducida <- enusc_reducida %>%
  mutate_all(~ifelse(. %in% "NaN", NA, .))
```

#Arbol de clasificación

```{r}
#Instalamos paquetes para ejecutar arbol de clasificación en torno a nuestro índice de percepción de inseguridad

if(!require(PracTools)){install.packages("PracTools")}
if(!require(paramtest)){install.packages("paramtest")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(rpart)){install.packages("rpart")}
if(!require(rpart.plot)){install.packages("rpart.plot")}
if(!require(janitor)){install.packages("janitor")}
if(!require(caret)){install.packages("caret")}
if(!require(rlang)){install.packages("rlang")}
library(rpart.plot)
library(janitor)
library(caret)
library(rlang)

# Configuración de control
control <- rpart.control(minbucket = 50, cp = 0)

# Entrenamiento del modelo
set.seed(123)
modelo_arbol <- rpart(indice_inseguridad ~ rph_sexo + rph_nivel + rph_nse + rph_situacion_laboral_a,
                      method = "class",
                      control = control,
                      data = enusc_reducida)

# Resumen del modelo
printcp(modelo_arbol)
summary(modelo_arbol)

# Visualización del árbol
# Configuración de parámetros comunes
common_args <- list(
  main = "Árbol para Índice de Percepción de la Inseguridad en ENUSC",
  extra = 106,
  nn = TRUE,
  fallen.leaves = TRUE,
  branch = 0.5,
  faclen = 0,
  trace = 1,
  shadow.col = "gray",
  branch.lty = 1,
  branch.type = 5,
  split.cex = 1.2,
  split.prefix = "is ",
  split.suffix = "?",
  split.box.col = "lightgray",
  split.border.col = "darkgray",
  split.round = 0.5
)

# Visualización del árbol con do.call
cols <- ifelse(modelo_arbol$frame$yval == 1, "gray50", "black")
do.call(prp, c(list(x = modelo_arbol, col = cols, border.col = cols), common_args))

```

#Random Forest (no carga de momento)

```{r}
#if(!require(party)){install.packages("party")}
#library(party)

# Eliminar filas con NA en 'indice_inseguridad'
#enusc_reducida_limpia <- #enusc_reducida[!is.na(enusc_reducida$indice_inseguridad), ]

# Verificar que ya no haya valores faltantes
#sum(is.na(enusc_reducida_limpia$indice_inseguridad)) # Debería ser 0

# Entrenar el modelo con el conjunto de datos limpio
#crf.enusc <- cforest(as.factor(indice_inseguridad) ~ rph_edad + 
#                       as.factor(rph_sexo) + 
#                       as.factor(rph_nivel) + 
#                       as.factor(rph_nse),
#                     controls = cforest_control(ntree = 50,
#                                                mtry = 4,
#                                                mincriterion = qnorm(0.8),
#                                                trace = TRUE),
#                     data = enusc_reducida_limpia)


```

```{r}
renv::snapshot()
```
