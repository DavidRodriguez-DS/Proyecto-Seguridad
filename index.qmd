---
title: "Proyecto-Seguridad"
---

```{r results='hide'}
rm(list = ls())

if(!require(renv)){install.packages("renv")}
library(renv)

renv::init()

# Lista de paquetes a ser instalados y cargados

packages <- c("rio", "dplyr", "ggplot2", "RColorBrewer", "kableExtra", "Rcpp", "ggcorrplot", "latex2exp","broom", "knitr", "haven")

# Activamos función para instalar paquetes

install_and_load <- function(package) {
  tryCatch({
    if (!require(package, character.only = TRUE)) {
      utils::install.packages(package)
      library(package, character.only = TRUE)
    }
  }, error = function(e) {
    message(paste("Error installing or loading:", package, "\n", e))
  })
}


# Aplicamos la función a cada paquete

invisible(capture.output(sapply(packages, install_and_load)))

# Actualizamos paquetes instalados en el renv

renv::snapshot(prompt = TRUE)
```

```{r}
#Leemos nuestras BBDD

#ENUSC 2023
url_enusc <- "https://www.ine.gob.cl/docs/default-source/seguridad-ciudadana/bbdd/2023/base-usuario-20-enusc-2023bf436364553a489fab8e92a1ef14a520.sav?sfvrsn=473ce20c_6&download=true"

enusc2023 <- import(url_enusc)

#CASEN 2022
url_casen <- "https://observatorio.ministeriodesarrollosocial.gob.cl/storage/docs/casen/2022/Base%20de%20datos%20Casen%202022%20SPSS_18%20marzo%202024.sav.zip"

casen <- import(url_casen)

#Dejamos bbdd casen cargada. No obstante no la utilizamos aún ya que, al parecer, no hay ninguna llave que nos permita unir ambas bbdd

enusc_reducida <- enusc2023 %>% select(rph_ID, idhogar, enc_idr, enc_region, enc_rpc, rph_numHogar, rph_edad, rph_sexo, rph_idgen, Kish, Hogar_Kish, rph_pertenencia_indigena, rph_nacionalidad, rph_nivel, rph_situacion_laboral_a, rph_categoria_ocupacional, rph_nse, P_AUMENTO_PAIS, P_AUMENTO_COM, P_AUMENTO_BARRIO, P_INSEG_LUGARES_1, P_INSEG_LUGARES_2, P_INSEG_LUGARES_3, P_INSEG_LUGARES_4, P_INSEG_LUGARES_5, P_INSEG_LUGARES_6, P_INSEG_LUGARES_7, P_INSEG_LUGARES_8, P_INSEG_LUGARES_9, P_INSEG_LUGARES_10, P_INSEG_LUGARES_11, P_INSEG_LUGARES_12, P_INSEG_LUGARES_13, P_INSEG_LUGARES_14, P_INSEG_LUGARES_15, P_INSEG_LUGARES_16, P_INSEG_OSCURO_1, P_INSEG_DIA_1, P_INSEG_OSCURO_2, P_INSEG_DIA_2, Fact_Pers_Com, Fact_Pers_Reg, Fact_Pers_Regional_102, Fact_Hog_Com, Fact_Hog_Reg, Fact_Hog_Regional_102, VarStrat, Conglomerado)

#Filtramos por Kish = 1 nuestra bbdd

enusc_reducida <- enusc_reducida %>% filter(Kish==1)

#Transformamos los NS/NR de las variables a utilizar

enusc_reducida <- enusc_reducida %>%
  mutate_all(~ifelse(. %in% c(88, 94, 99, 85), NA, .))

#Invertimos la respuesta de las variables sobre inseguridad para asentar su respuesta:

enusc_reducida <- enusc_reducida %>% mutate(across(c("P_INSEG_LUGARES_1", "P_INSEG_LUGARES_2", "P_INSEG_LUGARES_3", "P_INSEG_LUGARES_4", 
                                                             "P_INSEG_LUGARES_5", "P_INSEG_LUGARES_6", "P_INSEG_LUGARES_7", "P_INSEG_LUGARES_8", 
                                                             "P_INSEG_LUGARES_9", "P_INSEG_LUGARES_10", "P_INSEG_LUGARES_11", "P_INSEG_LUGARES_12", 
                                                             "P_INSEG_LUGARES_13", "P_INSEG_LUGARES_14", "P_INSEG_LUGARES_15", "P_INSEG_LUGARES_16", 
                                                             "P_INSEG_OSCURO_1", "P_INSEG_DIA_1", "P_INSEG_OSCURO_2", "P_INSEG_DIA_2"), ~ 5 - .))



# --- 2. ANÁLISIS DESCRIPTIVO ---

# SACAR NA, NS/NR DE AMBAS BBDD


enusc_inseguridad = subset(enusc_reducida, select = c(P_INSEG_LUGARES_1, P_INSEG_LUGARES_2, P_INSEG_LUGARES_3, P_INSEG_LUGARES_4, P_INSEG_LUGARES_5, P_INSEG_LUGARES_6, P_INSEG_LUGARES_7, P_INSEG_LUGARES_8, P_INSEG_LUGARES_9, P_INSEG_LUGARES_10, P_INSEG_LUGARES_11, P_INSEG_LUGARES_12, P_INSEG_LUGARES_13, P_INSEG_LUGARES_14, P_INSEG_LUGARES_15, P_INSEG_LUGARES_16, P_INSEG_OSCURO_1, P_INSEG_DIA_1, P_INSEG_OSCURO_2, P_INSEG_DIA_2))

enusc_sociodemo = subset(enusc_reducida, select = c(rph_pertenencia_indigena, rph_nacionalidad, rph_nivel, rph_situacion_laboral_a, rph_categoria_ocupacional, rph_nse))

# Estadísticos descriptivos para 'enusc_inseguridad'
summary(enusc_inseguridad)

# Usando la función 'describe' del paquete psych para un análisis más detallado
psych::describe(enusc_inseguridad)

# Estadísticos descriptivos para 'enusc_sociodemo'
summary(enusc_sociodemo)

# Usando la función 'describe' del paquete psych para un análisis más detallado
psych::describe(enusc_sociodemo)

# Visualizamos histogramas para cada variable de inseguridad
enusc_inseguridad %>% 
  pivot_longer(cols = everything(), names_to = "variable", values_to = "valor") %>% 
  ggplot(aes(x = valor)) + 
  geom_histogram(binwidth = 1, fill = "skyblue", color = "black") + 
  facet_wrap(~variable, scales = "free") + 
  theme_minimal() + 
  labs(title = "Distribución de las variables de inseguridad", x = "Respuesta", y = "Frecuencia")

```

#Arbol de clasificación

```{r}
#Instalamos paquetes para ejecutar arbol de clasificación en torno a nuestro índice de percepción de inseguridad

if(!require(PracTools)){install.packages("PracTools")}
if(!require(paramtest)){install.packages("paramtest")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(rpart)){install.packages("rpart")}
if(!require(rpart.plot)){install.packages("rpart.plot")}
if(!require(janitor)){install.packages("janitor")}
if(!require(caret)){install.packages("caret")}
if(!require(rlang)){install.packages("rlang")}
library(rpart.plot)
library(janitor)
library(caret)
library(rlang)

# Hacemos una configuración de control
control <- rpart.control(minbucket = 50, cp = 0)

# Entrenamos el modelo 
set.seed(123)
modelo_arbol <- rpart(indice_inseguridad ~ rph_sexo + rph_nivel + rph_nse + rph_situacion_laboral_a,
                      method = "class",
                      control = control,
                      data = enusc2023_reducida)

# Resumen del modelo
printcp(modelo_arbol)
summary(modelo_arbol)

# Visualización del árbol

# Configuramos los parámetros comunes
common_args <- list(
  main = "Árbol para Índice de Percepción de la Inseguridad en ENUSC",
  extra = 106,
  nn = TRUE,
  fallen.leaves = TRUE,
  branch = 0.5,
  faclen = 0,
  trace = 1,
  shadow.col = "gray",
  branch.lty = 1,
  branch.type = 5,
  split.cex = 1.2,
  split.prefix = "is ",
  split.suffix = "?",
  split.box.col = "lightgray",
  split.border.col = "darkgray",
  split.round = 0.5
)

# Visualizamos el arbol de clasificación
cols <- ifelse(modelo_arbol$frame$yval == 1, "gray50", "black")
do.call(prp, c(list(x = modelo_arbol, col = cols, border.col = cols), common_args))

```

#Random Forest (no carga de momento)

```{r}
# Instalamos y cargamos los paquetes necesarios
if(!require(randomForest)){install.packages("randomForest")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(janitor)){install.packages("janitor")}
library(randomForest)
library(tidyverse)
library(janitor)

# Configuramos el modelo Random Forest
set.seed(123)

modelo_rf <- randomForest(as.factor(indice_inseguridad) ~ rph_sexo + 
                            rph_nivel + 
                            rph_nse + 
                            rph_situacion_laboral_a,
                          data = enusc2023_reducida,
                          ntree = 50,         # Número conservador de árboles
                          mtry = 2,           # Número de variables usadas en cada división
                          maxnodes = 20,      # Máximo de nodos terminales para limitar la complejidad
                          nodesize = 50,      # Número mínimo de observaciones por nodo hoja
                          importance = TRUE)  # Para evaluar la importancia de las variables

# Resumen del modelo
print(modelo_rf)

# Importancia de las variables
varImpPlot(modelo_rf, main = "Importancia de las Variables")
```

#Random Forest con Paquete Party

```{r modelo-cforest, eval=FALSE}
# Instalamos y cargamos el paquete necesario
if(!require(party)){install.packages("party")}
library(party)

# Configuración el modelo de random forest con cforest
set.seed(123)

# Tomamos un subconjunto de 5000 observaciones como prueba
enusc_sub <- enusc2023_reducida[1:5000, ]

# Ejecutamos el modelo con el subconjunto
crf.enusc_sub <- cforest(as.factor(indice_inseguridad) ~ as.factor(rph_sexo) + 
                           as.factor(rph_nivel) + 
                           as.factor(rph_nse),
                         controls = cforest_control(
                           ntree = 20,
                           mtry = 2,
                           mincriterion = 0.95,
                           maxdepth = 4,
                           trace = TRUE
                         ),
                         data = enusc_sub)

# Revisamos el modelo con el subconjunto
print(crf.enusc_sub)

# Resumen del modelo
print(crf.enusc_sub)

# Importancia de las variables
varimp <- varimp(crf.enusc_sub)  # Importancia de variables
print(varimp)

# Visualizamos la importancia de las variables
barplot(varimp, main = "Importancia de Variables", col = "steelblue")

#Guardamos nuestro modelo

saveRDS(crf.enusc_sub, file = "cforest_model_inseguridad.rds")

#Guardamos RData
save.image(file = "entorno_randomforest.RData")
```

```{r}
# Instalamos y cargamos el paquete necesario
if(!require(party)){install.packages("party")}
library(party)

# Cargamos el modelo
loaded_cforest <- readRDS("cforest_model_inseguridad.rds")

# Volvemos a graficar la importancia de las variables
varimp <- varimp(loaded_cforest)

#Estadisticos de la predicción con 5000 observaciones

print(varimp)

#Graficamos

barplot(sort(varimp), main = "Importancia de variables", col = "steelblue")

```

```{r}
renv::snapshot()
```
